generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Country{
  id  String  @id @default(uuid())
  name  String
  district District[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Town{
  id    String  @id   @default(uuid())
  name  String
  districtId  String
  district District @relation(fields: [districtId], references: [id])
  entity   Entity[]

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model District{
  id    String  @id   @default(uuid())
  name  String
  countryId  String
  country Country @relation(fields: [countryId], references: [id])
  town    Town[]

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Customer{
  id    String  @id   @default(uuid())
  name  String
  address String
  phone   String
  clientBankAccount  ClientBankAccount[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Grade{
  id    String  @id   @default(uuid())
  name  String
  employees Employee[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Echelon{
  id    String   @id    @default(uuid())
  name  String
  employees Employee[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}


model Category{
  id    String   @id    @default(uuid())
  name  String
  employees Employee[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Function{
  id    String  @id   @default(uuid())
  name  String
  employees Employee[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Entity{
  id    String   @id    @default(uuid())
  name  String
  localisation    String
  address   String
  phone     String
  townId    String
  towns     Town    @relation(fields: [townId], references: [id])
  departements       Department[]
  entityBankAccounts EntityBankAccount[]
  shifts    Shift[]
  suppliers Supplier[]
  employees Employee[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Employee{
  id    String  @id   @default(uuid())
  email      String?
  phone      String?
  picture    String?
  functionId String
  function   Function  @relation(fields: [functionId], references: [id])
  gradeId    String
  grade      Grade     @relation(fields: [gradeId], references: [id])
  echelonId  String
  echelon    Echelon   @relation(fields: [echelonId], references: [id])
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  userId     String
  entityId   String
  entity     Entity    @relation(fields: [entityId], references: [id])
  permissions          Permission[]
  roles      Role[]

  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model   Permission{
  id    String  @id   @default(uuid())
  permissionName      String
  displayName         String
  description         String?
  employees   Employee[]
  roles      Role[]
  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model Role{
  id    String  @id   @default(uuid())
  roleName      String
  displayName   String
  description   String?
  employees   Employee[]
  permissions Permission[]
  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model Application{
  id    String  @id   @default(uuid())
  name  String
  url   String
  description   String?
}

model Supplier{
  id    String  @id   @default(uuid())
  name  String
  email String
  phone String
  entityId  String
  entity    Entity  @relation(fields: [entityId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Shift{
  id    String  @id   @default(uuid())
  name  String?
  startTime     DateTime
  endTime       DateTime
  entityId      String
  entity        Entity  @relation(fields: [entityId], references: [id])
  isActive      Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Department{
  id    String    @id   @default(uuid())
  name  String
  entityId        String
  entity          Entity @relation(fields: [entityId], references: [id])
  services        Service[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}


model Service{
  id    String   @id    @default(uuid())
  name  String
  departmentId    String
  department      Department   @relation(fields: [departmentId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}


model Bank{
  id    String  @id      @default(uuid())
  name  String
  address       String
  phone         String
  clientBankAccount ClientBankAccount[]
  entityBankAccount EntityBankAccount[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model ClientBankAccount{
  id    String   @id  @default(uuid())
  accountNumber  String
  bankId    String
  bank      Bank    @relation(fields: [bankId], references: [id])
  clientId  String
  customer  Customer  @relation(fields: [clientId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model EntityBankAccount{
  id    String   @id  @default(uuid())
  accountNumber  String
  bankId    String
  bank      Bank    @relation(fields: [bankId], references: [id])
  entityId  String
  entity    Entity  @relation(fields: [entityId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}
