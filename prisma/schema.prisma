generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model country{
  id  String  @id @default(uuid())
  name  String    @unique
  district district[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model town{
  id    String  @id   @default(uuid())
  name  String
  districtId  String
  district district @relation(fields: [districtId], references: [id])
  entity   entity[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([name, districtId])
}

model district{
  id    String  @id   @default(uuid())
  name  String
  countryId  String
  country country @relation(fields: [countryId], references: [id])
  town    town[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([name, countryId])
}

model site{
  id    String    @id   @default(uuid())
  name  String
  typeSite        SITE_TYPE   @default(FIELD)
  entityId        String
  entity          entity      @relation(fields: [entityId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  @@unique([name, entityId])
}

model customer{
  id    String  @id   @default(uuid())
  name  String  @unique
  email String
  phone   String
  clientBankAccount  clientbankaccount[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model grade{
  id    String  @id   @default(uuid())
  name  String  @unique
  employees employee[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model echelon{
  id    String   @id    @default(uuid())
  name  String   @unique
  employees employee[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model category{
  id    String   @id    @default(uuid())
  name  String   @unique
  employees employee[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Function{
  id    String  @id   @default(uuid())
  name  String  @unique
  employees employee[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model entity{
  id              String   @id    @default(uuid())
  name            String   @unique
  localisation    String
  phone           String
  townId          String
  towns              town    @relation(fields: [townId], references: [id])
  departements       department[]
  entityBankAccounts entitybankaccount[]
  shifts    shift[]
  suppliers supplier[]
  employees employee[]
  sites     site[]
  article   article[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model employee{
  id    String  @id   @default(uuid())
  email      String?  @unique
  phone      String?  @unique
  name       String?  @unique
  picture    String?
  functionId String?
  function   Function?  @relation(fields: [functionId], references: [id])
  gradeId    String?
  grade      grade?     @relation(fields: [gradeId], references: [id])
  echelonId  String?
  echelon    echelon?   @relation(fields: [echelonId], references: [id])
  categoryId String?
  category   category?  @relation(fields: [categoryId], references: [id])
  userId     String     @unique
  entityId   String
  entity     entity    @relation(fields: [entityId], references: [id])
  employeePermissions  employeepermission[]
  employeeRoles   employeerole[]
  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model employeepermission{
  id    String  @id         @default(uuid())
  employeeId    String
  employee      employee    @relation(fields: [employeeId], references: [id])
  permissionId  String
  permission    permission  @relation(fields: [permissionId], references: [id])
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model applicationpermission{
  id    String  @id         @default(uuid())
  applicationId    String
  application      application    @relation(fields: [applicationId], references: [id])
  permissionId  String
  permission    permission  @relation(fields: [permissionId], references: [id])
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model employeerole{
  id    String  @id       @default(uuid())
  employeeId    String
  employee      employee  @relation(fields: [employeeId], references: [id])
  roleId        String
  role          role      @relation(fields: [roleId], references: [id])
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model   permission{
  id    String  @id   @default(uuid())
  permissionName      String
  displayName         String
  description         String?
  employeePermissions  employeepermission[]
  permissionRoles      permissionrole[]
  applicationPermissions     applicationpermission[]
  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model permissionrole{
  id    String    @id   @default(uuid())
  permissionId      String
  permission        permission    @relation(fields: [permissionId], references: [id])
  roleId            String
  role              role          @relation(fields: [roleId], references: [id])
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model role{
  id    String  @id   @default(uuid())
  roleName      String
  displayName   String
  description   String?
  employeeRoles   employeerole[]
  permissionRoles permissionrole[]
  createdBy  String
  updatedBy  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model application{
  id    String  @id   @default(uuid())
  name  String
  url   String
  image String?
  applicationPermissions     applicationpermission[]
  description   String?
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model supplier{
  id    String  @id   @default(uuid())
  name  String  @unique
  email String
  phone String
  entityId  String
  entity    entity    @relation(fields: [entityId], references: [id])
  isActive  Boolean   @default(true)

  createdBy String
  updatedBy  String?
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model article{
  id          String    @id   @default(uuid())
  name        String
  price       Float     @default(0.0)
  hasTVA      Boolean   @default(false)
  type        ARTICLE_TYPE
  idEntity    String    @unique
  entity      entity    @relation(fields: [idEntity], references: [id])
  isActive    Boolean   @default(true)
  createdBy   String
  updatedBy   String?

  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model shift{
  id    String  @id   @default(uuid())
  name  String? @unique
  startTime     String
  endTime       String
  entityId      String
  entity        entity  @relation(fields: [entityId], references: [id])
  isActive      Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@unique([startTime, endTime])
}

model department{
  id    String    @id   @default(uuid())
  name  String    
  entityId        String
  entity          entity @relation(fields: [entityId], references: [id])
  services        service[]
  isActive  Boolean @default(true)
  
  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model service{
  id    String   @id    @default(uuid())
  name  String
  departmentId    String
  department      department   @relation(fields: [departmentId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model bank{
  id    String  @id      @default(uuid())
  name  String  @unique
  address       String
  phone         String
  clientBankAccount clientbankaccount[]
  entityBankAccount entitybankaccount[]
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model clientbankaccount{
  id    String   @id  @default(uuid())
  accountNumber  String
  bankId    String
  bank      bank    @relation(fields: [bankId], references: [id])
  clientId  String
  customer  customer  @relation(fields: [clientId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model entitybankaccount{
  id    String   @id  @default(uuid())
  accountNumber  String
  bankId    String
  bank      bank    @relation(fields: [bankId], references: [id])
  entityId  String
  entity    entity  @relation(fields: [entityId], references: [id])
  isActive  Boolean @default(true)

  createdBy String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

enum SITE_TYPE{
  HEADQUARTER
  FIELD
}

enum ARTICLE_TYPE{
  PRODUCT
  EQUIPEMENT
}

